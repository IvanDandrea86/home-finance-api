# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Query {
  permission(where: PermissionWhereUniqueInput!): Permission
  findFirstPermission(where: PermissionWhereInput, orderBy: [PermissionOrderByWithRelationInput!], cursor: PermissionWhereUniqueInput, take: Int, skip: Int, distinct: [PermissionScalarFieldEnum!]): Permission
  permissions(where: PermissionWhereInput, orderBy: [PermissionOrderByWithRelationInput!], cursor: PermissionWhereUniqueInput, take: Int, skip: Int, distinct: [PermissionScalarFieldEnum!]): [Permission!]!
  aggregatePermission(where: PermissionWhereInput, orderBy: [PermissionOrderByWithRelationInput!], cursor: PermissionWhereUniqueInput, take: Int, skip: Int): AggregatePermission!
  groupByPermission(where: PermissionWhereInput, orderBy: [PermissionOrderByWithAggregationInput!], by: [PermissionScalarFieldEnum!]!, having: PermissionScalarWhereWithAggregatesInput, take: Int, skip: Int): [PermissionGroupBy!]!
  user(where: UserWhereUniqueInput!): User
  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput!], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum!]): User
  users(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput!], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum!]): [User!]!
  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput!], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!
  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput!], by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupBy!]!
}

type Permission {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: String!
  type: Role!
  user: User
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum Role {
  ADMIN
  USER
}

type User {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  firstName: String!
  lastName: String!
  email: String!
  password: String
  validationToken: String!
  lastLogin: DateTime
  verificationStatus: VerificationStatus!
  permission: Permission
}

enum VerificationStatus {
  NOT_VERIFIED
  VERIFIED
  PENDING
}

input PermissionWhereUniqueInput {
  id: String
  userId: String
}

input PermissionWhereInput {
  AND: [PermissionWhereInput!]
  OR: [PermissionWhereInput!]
  NOT: [PermissionWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
  type: EnumRoleFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  firstName: StringFilter
  lastName: StringFilter
  email: StringFilter
  password: StringNullableFilter
  validationToken: StringFilter
  lastLogin: DateTimeNullableFilter
  verificationStatus: EnumVerificationStatusFilter
  permission: PermissionRelationFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input EnumVerificationStatusFilter {
  equals: VerificationStatus
  in: [VerificationStatus!]
  notIn: [VerificationStatus!]
  not: NestedEnumVerificationStatusFilter
}

input NestedEnumVerificationStatusFilter {
  equals: VerificationStatus
  in: [VerificationStatus!]
  notIn: [VerificationStatus!]
  not: NestedEnumVerificationStatusFilter
}

input PermissionRelationFilter {
  is: PermissionWhereInput
  isNot: PermissionWhereInput
}

input EnumRoleFilter {
  equals: Role
  in: [Role!]
  notIn: [Role!]
  not: NestedEnumRoleFilter
}

input NestedEnumRoleFilter {
  equals: Role
  in: [Role!]
  notIn: [Role!]
  not: NestedEnumRoleFilter
}

input PermissionOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
  type: SortOrder
}

enum SortOrder {
  asc
  desc
}

input UserOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  firstName: SortOrder
  lastName: SortOrder
  email: SortOrder
  password: SortOrder
  validationToken: SortOrder
  lastLogin: SortOrder
  verificationStatus: SortOrder
  permission: PermissionOrderByWithRelationInput
}

enum PermissionScalarFieldEnum {
  id
  createdAt
  updatedAt
  userId
  type
}

type AggregatePermission {
  _count: PermissionCountAggregate
  _min: PermissionMinAggregate
  _max: PermissionMaxAggregate
}

type PermissionCountAggregate {
  id: Int!
  createdAt: Int!
  updatedAt: Int!
  userId: Int!
  type: Int!
  _all: Int!
}

type PermissionMinAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  userId: String
  type: Role
}

type PermissionMaxAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  userId: String
  type: Role
}

type PermissionGroupBy {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: String!
  type: Role!
  _count: PermissionCountAggregate
  _min: PermissionMinAggregate
  _max: PermissionMaxAggregate
}

input PermissionOrderByWithAggregationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
  type: SortOrder
  _count: PermissionCountOrderByAggregateInput
  _max: PermissionMaxOrderByAggregateInput
  _min: PermissionMinOrderByAggregateInput
}

input PermissionCountOrderByAggregateInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
  type: SortOrder
}

input PermissionMaxOrderByAggregateInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
  type: SortOrder
}

input PermissionMinOrderByAggregateInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
  type: SortOrder
}

input PermissionScalarWhereWithAggregatesInput {
  AND: [PermissionScalarWhereWithAggregatesInput!]
  OR: [PermissionScalarWhereWithAggregatesInput!]
  NOT: [PermissionScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: StringWithAggregatesFilter
  type: EnumRoleWithAggregatesFilter
}

input StringWithAggregatesFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedStringFilter
  _max: NestedStringFilter
}

input NestedStringWithAggregatesFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedStringFilter
  _max: NestedStringFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input DateTimeWithAggregatesFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedDateTimeFilter
  _max: NestedDateTimeFilter
}

input NestedDateTimeWithAggregatesFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedDateTimeFilter
  _max: NestedDateTimeFilter
}

input EnumRoleWithAggregatesFilter {
  equals: Role
  in: [Role!]
  notIn: [Role!]
  not: NestedEnumRoleWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedEnumRoleFilter
  _max: NestedEnumRoleFilter
}

input NestedEnumRoleWithAggregatesFilter {
  equals: Role
  in: [Role!]
  notIn: [Role!]
  not: NestedEnumRoleWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedEnumRoleFilter
  _max: NestedEnumRoleFilter
}

input UserWhereUniqueInput {
  id: String
  email: String
}

enum UserScalarFieldEnum {
  id
  createdAt
  updatedAt
  firstName
  lastName
  email
  password
  validationToken
  lastLogin
  verificationStatus
}

type AggregateUser {
  _count: UserCountAggregate
  _min: UserMinAggregate
  _max: UserMaxAggregate
}

type UserCountAggregate {
  id: Int!
  createdAt: Int!
  updatedAt: Int!
  firstName: Int!
  lastName: Int!
  email: Int!
  password: Int!
  validationToken: Int!
  lastLogin: Int!
  verificationStatus: Int!
  _all: Int!
}

type UserMinAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  firstName: String
  lastName: String
  email: String
  password: String
  validationToken: String
  lastLogin: DateTime
  verificationStatus: VerificationStatus
}

type UserMaxAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  firstName: String
  lastName: String
  email: String
  password: String
  validationToken: String
  lastLogin: DateTime
  verificationStatus: VerificationStatus
}

type UserGroupBy {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  firstName: String!
  lastName: String!
  email: String!
  password: String
  validationToken: String!
  lastLogin: DateTime
  verificationStatus: VerificationStatus!
  _count: UserCountAggregate
  _min: UserMinAggregate
  _max: UserMaxAggregate
}

input UserOrderByWithAggregationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  firstName: SortOrder
  lastName: SortOrder
  email: SortOrder
  password: SortOrder
  validationToken: SortOrder
  lastLogin: SortOrder
  verificationStatus: SortOrder
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
}

input UserCountOrderByAggregateInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  firstName: SortOrder
  lastName: SortOrder
  email: SortOrder
  password: SortOrder
  validationToken: SortOrder
  lastLogin: SortOrder
  verificationStatus: SortOrder
}

input UserMaxOrderByAggregateInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  firstName: SortOrder
  lastName: SortOrder
  email: SortOrder
  password: SortOrder
  validationToken: SortOrder
  lastLogin: SortOrder
  verificationStatus: SortOrder
}

input UserMinOrderByAggregateInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  firstName: SortOrder
  lastName: SortOrder
  email: SortOrder
  password: SortOrder
  validationToken: SortOrder
  lastLogin: SortOrder
  verificationStatus: SortOrder
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  firstName: StringWithAggregatesFilter
  lastName: StringWithAggregatesFilter
  email: StringWithAggregatesFilter
  password: StringNullableWithAggregatesFilter
  validationToken: StringWithAggregatesFilter
  lastLogin: DateTimeNullableWithAggregatesFilter
  verificationStatus: EnumVerificationStatusWithAggregatesFilter
}

input StringNullableWithAggregatesFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _min: NestedStringNullableFilter
  _max: NestedStringNullableFilter
}

input NestedStringNullableWithAggregatesFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _min: NestedStringNullableFilter
  _max: NestedStringNullableFilter
}

input NestedIntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input DateTimeNullableWithAggregatesFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _min: NestedDateTimeNullableFilter
  _max: NestedDateTimeNullableFilter
}

input NestedDateTimeNullableWithAggregatesFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _min: NestedDateTimeNullableFilter
  _max: NestedDateTimeNullableFilter
}

input EnumVerificationStatusWithAggregatesFilter {
  equals: VerificationStatus
  in: [VerificationStatus!]
  notIn: [VerificationStatus!]
  not: NestedEnumVerificationStatusWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedEnumVerificationStatusFilter
  _max: NestedEnumVerificationStatusFilter
}

input NestedEnumVerificationStatusWithAggregatesFilter {
  equals: VerificationStatus
  in: [VerificationStatus!]
  notIn: [VerificationStatus!]
  not: NestedEnumVerificationStatusWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedEnumVerificationStatusFilter
  _max: NestedEnumVerificationStatusFilter
}

type Mutation {
  createPermission(data: PermissionCreateInput!): Permission!
  createManyPermission(data: [PermissionCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  deletePermission(where: PermissionWhereUniqueInput!): Permission
  updatePermission(data: PermissionUpdateInput!, where: PermissionWhereUniqueInput!): Permission
  deleteManyPermission(where: PermissionWhereInput): AffectedRowsOutput!
  updateManyPermission(data: PermissionUpdateManyMutationInput!, where: PermissionWhereInput): AffectedRowsOutput!
  upsertPermission(where: PermissionWhereUniqueInput!, create: PermissionCreateInput!, update: PermissionUpdateInput!): Permission!
  createUser(data: UserCreateInput!): User!
  createManyUser(data: [UserCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  deleteUser(where: UserWhereUniqueInput!): User
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
}

input PermissionCreateInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutPermissionInput
  type: Role!
}

input UserCreateNestedOneWithoutPermissionInput {
  create: UserCreateWithoutPermissionInput
  connectOrCreate: UserCreateOrConnectWithoutPermissionInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutPermissionInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  firstName: String!
  lastName: String!
  email: String!
  password: String
  validationToken: String!
  lastLogin: DateTime
  verificationStatus: VerificationStatus
}

input UserCreateOrConnectWithoutPermissionInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutPermissionInput!
}

type AffectedRowsOutput {
  count: Int!
}

input PermissionCreateManyInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  userId: String!
  type: Role!
}

input PermissionUpdateInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneWithoutPermissionInput
  type: EnumRoleFieldUpdateOperationsInput
}

input StringFieldUpdateOperationsInput {
  set: String
}

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input UserUpdateOneWithoutPermissionInput {
  create: UserCreateWithoutPermissionInput
  connectOrCreate: UserCreateOrConnectWithoutPermissionInput
  upsert: UserUpsertWithoutPermissionInput
  disconnect: Boolean
  delete: Boolean
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutPermissionInput
}

input UserUpsertWithoutPermissionInput {
  update: UserUpdateWithoutPermissionInput!
  create: UserCreateWithoutPermissionInput!
}

input UserUpdateWithoutPermissionInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  validationToken: StringFieldUpdateOperationsInput
  lastLogin: NullableDateTimeFieldUpdateOperationsInput
  verificationStatus: EnumVerificationStatusFieldUpdateOperationsInput
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input EnumVerificationStatusFieldUpdateOperationsInput {
  set: VerificationStatus
}

input EnumRoleFieldUpdateOperationsInput {
  set: Role
}

input PermissionUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  type: EnumRoleFieldUpdateOperationsInput
}

input UserCreateInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  firstName: String!
  lastName: String!
  email: String!
  password: String
  validationToken: String!
  lastLogin: DateTime
  verificationStatus: VerificationStatus
  permission: PermissionCreateNestedOneWithoutUserInput
}

input PermissionCreateNestedOneWithoutUserInput {
  create: PermissionCreateWithoutUserInput
  connectOrCreate: PermissionCreateOrConnectWithoutUserInput
  connect: PermissionWhereUniqueInput
}

input PermissionCreateWithoutUserInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  type: Role!
}

input PermissionCreateOrConnectWithoutUserInput {
  where: PermissionWhereUniqueInput!
  create: PermissionCreateWithoutUserInput!
}

input UserCreateManyInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  firstName: String!
  lastName: String!
  email: String!
  password: String
  validationToken: String!
  lastLogin: DateTime
  verificationStatus: VerificationStatus
}

input UserUpdateInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  validationToken: StringFieldUpdateOperationsInput
  lastLogin: NullableDateTimeFieldUpdateOperationsInput
  verificationStatus: EnumVerificationStatusFieldUpdateOperationsInput
  permission: PermissionUpdateOneWithoutUserInput
}

input PermissionUpdateOneWithoutUserInput {
  create: PermissionCreateWithoutUserInput
  connectOrCreate: PermissionCreateOrConnectWithoutUserInput
  upsert: PermissionUpsertWithoutUserInput
  disconnect: Boolean
  delete: Boolean
  connect: PermissionWhereUniqueInput
  update: PermissionUpdateWithoutUserInput
}

input PermissionUpsertWithoutUserInput {
  update: PermissionUpdateWithoutUserInput!
  create: PermissionCreateWithoutUserInput!
}

input PermissionUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  type: EnumRoleFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  validationToken: StringFieldUpdateOperationsInput
  lastLogin: NullableDateTimeFieldUpdateOperationsInput
  verificationStatus: EnumVerificationStatusFieldUpdateOperationsInput
}
