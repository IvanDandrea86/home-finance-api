# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Permission {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  User: User
  userId: String!
  type: Role!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum Role {
  ADMIN
  USER
}

type Detail {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  Expense: Expense
  expenseId: String
  cost: Float!
  period: Int
  user: User
  userId: String
}

type Charge {
  id: ID!
  createdAt: DateTime!
  name: String!
  updatedAt: DateTime!
  cost: Float!
  Account: Account
  accountId: String
}

type AccountCount {
  charge: Int!
  Expense: Int!
}

type Account {
  id: ID!
  createdAt: DateTime!
  type: AccountType!
  updatedAt: DateTime!
  name: String!
  charge: [Charge!]
  monthlyBudget: Float!
  sold: Float!
  Family: Family
  familyId: String
  Expense: [Expense!]
  _count: AccountCount!
}

enum AccountType {
  SAVING
  EXPENSE
}

type ExpenseCount {
  expenseDetails: Int!
}

type Expense {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  expenseDetails: [Detail!]
  monthlyCost: Float!
  Family: Family
  familyId: String
  Account: Account
  accountId: String
  _count: ExpenseCount!
}

type Revenue {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  User: User!
  Family: Family!
  userId: String!
  familyId: String!
}

type FamilyCount {
  members: Int!
  expenses: Int!
  revenues: Int!
  accounts: Int!
}

type Family {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  members: [User!]
  expenses: [Expense!]
  revenues: [Revenue!]
  accounts: [Account!]
  _count: FamilyCount!
}

type UserCount {
  Revenue: Int!
  Mandate: Int!
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  firstName: String!
  lastName: String!
  email: String!
  password: String
  validationToken: String!
  lastLogin: DateTime
  verificationStatus: VerificationStatus!
  Permission: Permission
  Family: Family
  familyId: String
  Revenue: [Revenue!]
  Mandate: [Detail!]
  _count: UserCount!
}

enum VerificationStatus {
  NOT_VERIFIED
  VERIFIED
  PENDING
}

type AuthResponse {
  message: String
  role: String
  user: User
}

type Query {
  charges(where: ChargeWhereInput, orderBy: [ChargeOrderByWithRelationInput!], cursor: ChargeWhereUniqueInput, take: Int, skip: Int, distinct: [ChargeScalarFieldEnum!]): [Charge!]!
  charge(where: ChargeWhereUniqueInput!): Charge
  details(where: DetailWhereInput, orderBy: [DetailOrderByWithRelationInput!], cursor: DetailWhereUniqueInput, take: Int, skip: Int, distinct: [DetailScalarFieldEnum!]): [Detail!]!
  detail(where: DetailWhereUniqueInput!): Detail
  accounts(where: AccountWhereInput, orderBy: [AccountOrderByWithRelationInput!], cursor: AccountWhereUniqueInput, take: Int, skip: Int, distinct: [AccountScalarFieldEnum!]): [Account!]!
  account(where: AccountWhereUniqueInput!): Account
  accountsUser: [Account!]!
  accountUser(where: AccountWhereUniqueInput!): Account
  expenses(where: ExpenseWhereInput, orderBy: [ExpenseOrderByWithRelationInput!], cursor: ExpenseWhereUniqueInput, take: Int, skip: Int, distinct: [ExpenseScalarFieldEnum!]): [Expense!]!
  expense(where: ExpenseWhereUniqueInput!): Expense
  revenues(where: RevenueWhereInput, orderBy: [RevenueOrderByWithRelationInput!], cursor: RevenueWhereUniqueInput, take: Int, skip: Int, distinct: [RevenueScalarFieldEnum!]): [Revenue!]!
  revenue(where: RevenueWhereUniqueInput!): Revenue
  familys(where: FamilyWhereInput, orderBy: [FamilyOrderByWithRelationInput!], cursor: FamilyWhereUniqueInput, take: Int, skip: Int, distinct: [FamilyScalarFieldEnum!]): [Family!]!
  family(where: FamilyWhereUniqueInput!): Family
  permissions(where: PermissionWhereInput, orderBy: [PermissionOrderByWithRelationInput!], cursor: PermissionWhereUniqueInput, take: Int, skip: Int, distinct: [PermissionScalarFieldEnum!]): [Permission!]!
  permission(where: PermissionWhereUniqueInput!): Permission
  users(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput!], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum!]): [User!]!
  user(where: UserWhereUniqueInput!): User
  whoAmI: User
}

input ChargeWhereInput {
  AND: [ChargeWhereInput!]
  OR: [ChargeWhereInput!]
  NOT: [ChargeWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  name: StringFilter
  updatedAt: DateTimeFilter
  cost: FloatFilter
  Account: AccountRelationFilter
  accountId: StringNullableFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input NestedFloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input AccountRelationFilter {
  is: AccountWhereInput
  isNot: AccountWhereInput
}

input AccountWhereInput {
  AND: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  type: EnumAccountTypeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  charge: ChargeListRelationFilter
  monthlyBudget: FloatFilter
  sold: FloatFilter
  Family: FamilyRelationFilter
  familyId: StringNullableFilter
  Expense: ExpenseListRelationFilter
}

input EnumAccountTypeFilter {
  equals: AccountType
  in: [AccountType!]
  notIn: [AccountType!]
  not: NestedEnumAccountTypeFilter
}

input NestedEnumAccountTypeFilter {
  equals: AccountType
  in: [AccountType!]
  notIn: [AccountType!]
  not: NestedEnumAccountTypeFilter
}

input ChargeListRelationFilter {
  every: ChargeWhereInput
  some: ChargeWhereInput
  none: ChargeWhereInput
}

input FamilyRelationFilter {
  is: FamilyWhereInput
  isNot: FamilyWhereInput
}

input FamilyWhereInput {
  AND: [FamilyWhereInput!]
  OR: [FamilyWhereInput!]
  NOT: [FamilyWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  members: UserListRelationFilter
  expenses: ExpenseListRelationFilter
  revenues: RevenueListRelationFilter
  accounts: AccountListRelationFilter
}

input UserListRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  firstName: StringFilter
  lastName: StringFilter
  email: StringFilter
  password: StringNullableFilter
  validationToken: StringFilter
  lastLogin: DateTimeNullableFilter
  verificationStatus: EnumVerificationStatusFilter
  Permission: PermissionRelationFilter
  Family: FamilyRelationFilter
  familyId: StringNullableFilter
  Revenue: RevenueListRelationFilter
  Mandate: DetailListRelationFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input EnumVerificationStatusFilter {
  equals: VerificationStatus
  in: [VerificationStatus!]
  notIn: [VerificationStatus!]
  not: NestedEnumVerificationStatusFilter
}

input NestedEnumVerificationStatusFilter {
  equals: VerificationStatus
  in: [VerificationStatus!]
  notIn: [VerificationStatus!]
  not: NestedEnumVerificationStatusFilter
}

input PermissionRelationFilter {
  is: PermissionWhereInput
  isNot: PermissionWhereInput
}

input PermissionWhereInput {
  AND: [PermissionWhereInput!]
  OR: [PermissionWhereInput!]
  NOT: [PermissionWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  User: UserRelationFilter
  userId: StringFilter
  type: EnumRoleFilter
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input EnumRoleFilter {
  equals: Role
  in: [Role!]
  notIn: [Role!]
  not: NestedEnumRoleFilter
}

input NestedEnumRoleFilter {
  equals: Role
  in: [Role!]
  notIn: [Role!]
  not: NestedEnumRoleFilter
}

input RevenueListRelationFilter {
  every: RevenueWhereInput
  some: RevenueWhereInput
  none: RevenueWhereInput
}

input RevenueWhereInput {
  AND: [RevenueWhereInput!]
  OR: [RevenueWhereInput!]
  NOT: [RevenueWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  User: UserRelationFilter
  Family: FamilyRelationFilter
  userId: StringFilter
  familyId: StringFilter
}

input DetailListRelationFilter {
  every: DetailWhereInput
  some: DetailWhereInput
  none: DetailWhereInput
}

input DetailWhereInput {
  AND: [DetailWhereInput!]
  OR: [DetailWhereInput!]
  NOT: [DetailWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  Expense: ExpenseRelationFilter
  expenseId: StringNullableFilter
  cost: FloatFilter
  period: IntNullableFilter
  user: UserRelationFilter
  userId: StringNullableFilter
}

input ExpenseRelationFilter {
  is: ExpenseWhereInput
  isNot: ExpenseWhereInput
}

input ExpenseWhereInput {
  AND: [ExpenseWhereInput!]
  OR: [ExpenseWhereInput!]
  NOT: [ExpenseWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  expenseDetails: DetailListRelationFilter
  monthlyCost: FloatFilter
  Family: FamilyRelationFilter
  familyId: StringNullableFilter
  Account: AccountRelationFilter
  accountId: StringNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input NestedIntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input ExpenseListRelationFilter {
  every: ExpenseWhereInput
  some: ExpenseWhereInput
  none: ExpenseWhereInput
}

input AccountListRelationFilter {
  every: AccountWhereInput
  some: AccountWhereInput
  none: AccountWhereInput
}

input ChargeOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  cost: SortOrder
  Account: AccountOrderByWithRelationInput
  accountId: SortOrder
}

enum SortOrder {
  asc
  desc
}

input AccountOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  name: SortOrder
  charge: ChargeOrderByRelationAggregateInput
  monthlyBudget: SortOrder
  sold: SortOrder
  Family: FamilyOrderByWithRelationInput
  familyId: SortOrder
  Expense: ExpenseOrderByRelationAggregateInput
}

input ChargeOrderByRelationAggregateInput {
  _count: SortOrder
}

input FamilyOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  members: UserOrderByRelationAggregateInput
  expenses: ExpenseOrderByRelationAggregateInput
  revenues: RevenueOrderByRelationAggregateInput
  accounts: AccountOrderByRelationAggregateInput
}

input UserOrderByRelationAggregateInput {
  _count: SortOrder
}

input ExpenseOrderByRelationAggregateInput {
  _count: SortOrder
}

input RevenueOrderByRelationAggregateInput {
  _count: SortOrder
}

input AccountOrderByRelationAggregateInput {
  _count: SortOrder
}

input ChargeWhereUniqueInput {
  id: String
}

enum ChargeScalarFieldEnum {
  id
  createdAt
  name
  updatedAt
  cost
  accountId
}

input DetailOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  name: SortOrder
  Expense: ExpenseOrderByWithRelationInput
  expenseId: SortOrder
  cost: SortOrder
  period: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input ExpenseOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  name: SortOrder
  expenseDetails: DetailOrderByRelationAggregateInput
  monthlyCost: SortOrder
  Family: FamilyOrderByWithRelationInput
  familyId: SortOrder
  Account: AccountOrderByWithRelationInput
  accountId: SortOrder
}

input DetailOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  firstName: SortOrder
  lastName: SortOrder
  email: SortOrder
  password: SortOrder
  validationToken: SortOrder
  lastLogin: SortOrder
  verificationStatus: SortOrder
  Permission: PermissionOrderByWithRelationInput
  Family: FamilyOrderByWithRelationInput
  familyId: SortOrder
  Revenue: RevenueOrderByRelationAggregateInput
  Mandate: DetailOrderByRelationAggregateInput
}

input PermissionOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  User: UserOrderByWithRelationInput
  userId: SortOrder
  type: SortOrder
}

input DetailWhereUniqueInput {
  id: String
}

enum DetailScalarFieldEnum {
  id
  createdAt
  updatedAt
  name
  expenseId
  cost
  period
  userId
}

input AccountWhereUniqueInput {
  id: String
}

enum AccountScalarFieldEnum {
  id
  createdAt
  type
  updatedAt
  name
  monthlyBudget
  sold
  familyId
}

input ExpenseWhereUniqueInput {
  id: String
  name: String
}

enum ExpenseScalarFieldEnum {
  id
  createdAt
  updatedAt
  name
  monthlyCost
  familyId
  accountId
}

input RevenueOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  User: UserOrderByWithRelationInput
  Family: FamilyOrderByWithRelationInput
  userId: SortOrder
  familyId: SortOrder
}

input RevenueWhereUniqueInput {
  id: String
}

enum RevenueScalarFieldEnum {
  id
  createdAt
  updatedAt
  userId
  familyId
}

input FamilyWhereUniqueInput {
  id: String
}

enum FamilyScalarFieldEnum {
  id
  createdAt
  updatedAt
}

input PermissionWhereUniqueInput {
  id: String
  userId: String
}

enum PermissionScalarFieldEnum {
  id
  createdAt
  updatedAt
  userId
  type
}

input UserWhereUniqueInput {
  id: String
  email: String
}

enum UserScalarFieldEnum {
  id
  createdAt
  updatedAt
  firstName
  lastName
  email
  password
  validationToken
  lastLogin
  verificationStatus
  familyId
}

type Mutation {
  createCharge(createChargeInput: ChargeCreateInput!): Charge!
  updateCharge(where: ChargeWhereUniqueInput!, updateChargeInput: ChargeUpdateInput!): Charge!
  removeCharge(where: ChargeWhereUniqueInput!): Charge!
  createDetail(createDetailInput: DetailCreateInput!): Detail!
  updateDetail(where: DetailWhereUniqueInput!, updateDetailInput: DetailUpdateInput!): Detail!
  removeDetail(where: DetailWhereUniqueInput!): Detail!
  createAccount(createAccountInput: AccountCreateInput!): Account!
  updateAccount(where: AccountWhereUniqueInput!, updateAccountInput: AccountUpdateInput!): Account!
  removeAccount(where: AccountWhereUniqueInput!): Account!
  updateAccountUser(where: AccountWhereUniqueInput!, updateAccountInput: AccountUpdateInput!): Account!
  createExpense(createExpenseInput: ExpenseCreateInput!): Expense!
  updateExpense(where: ExpenseWhereUniqueInput!, updateExpenseInput: ExpenseUpdateInput!): Expense!
  removeExpense(where: ExpenseWhereUniqueInput!): Expense!
  createRevenue(createRevenueInput: RevenueCreateInput!): Revenue!
  updateRevenue(where: RevenueWhereUniqueInput!, updateRevenueInput: RevenueUpdateInput!): Revenue!
  removeRevenue(where: RevenueWhereUniqueInput!): Revenue!
  createFamily(createFamilyInput: FamilyCreateInput!): Family!
  updateFamily(where: FamilyWhereUniqueInput!, updateFamilyInput: FamilyUpdateInput!): Family!
  removeFamily(where: FamilyWhereUniqueInput!): Family!
  createPermission(createPermissionInput: PermissionCreateInput!): Permission!
  updatePermission(where: PermissionWhereUniqueInput!, updatePermissionInput: PermissionUpdateInput!): Permission!
  removePermission(where: PermissionWhereUniqueInput!): Permission!
  createUser(createUserInput: UserCreateInput!): User!
  updateUser(where: UserWhereUniqueInput!, updateUserInput: UserUpdateInput!): User!
  removeUser(where: UserWhereUniqueInput!): User!
  login(authInput: AuthInput!): AuthResponse!
  logout: AuthResponse
}

input ChargeCreateInput {
  id: String
  createdAt: DateTime
  name: String!
  updatedAt: DateTime
  cost: Float!
  Account: AccountCreateNestedOneWithoutChargeInput
}

input AccountCreateNestedOneWithoutChargeInput {
  create: AccountCreateWithoutChargeInput
  connectOrCreate: AccountCreateOrConnectWithoutChargeInput
  connect: AccountWhereUniqueInput
}

input AccountCreateWithoutChargeInput {
  id: String
  createdAt: DateTime
  type: AccountType!
  updatedAt: DateTime
  name: String!
  monthlyBudget: Float
  sold: Float
  Family: FamilyCreateNestedOneWithoutAccountsInput
  Expense: ExpenseCreateNestedManyWithoutAccountInput
}

input FamilyCreateNestedOneWithoutAccountsInput {
  create: FamilyCreateWithoutAccountsInput
  connectOrCreate: FamilyCreateOrConnectWithoutAccountsInput
  connect: FamilyWhereUniqueInput
}

input FamilyCreateWithoutAccountsInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  members: UserCreateNestedManyWithoutFamilyInput
  expenses: ExpenseCreateNestedManyWithoutFamilyInput
  revenues: RevenueCreateNestedManyWithoutFamilyInput
}

input UserCreateNestedManyWithoutFamilyInput {
  create: [UserCreateWithoutFamilyInput!]
  connectOrCreate: [UserCreateOrConnectWithoutFamilyInput!]
  createMany: UserCreateManyFamilyInputEnvelope
  connect: [UserWhereUniqueInput!]
}

input UserCreateWithoutFamilyInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  firstName: String!
  lastName: String!
  email: String!
  password: String
  validationToken: String!
  lastLogin: DateTime
  verificationStatus: VerificationStatus
  Permission: PermissionCreateNestedOneWithoutUserInput
  Revenue: RevenueCreateNestedManyWithoutUserInput
  Mandate: DetailCreateNestedManyWithoutUserInput
}

input PermissionCreateNestedOneWithoutUserInput {
  create: PermissionCreateWithoutUserInput
  connectOrCreate: PermissionCreateOrConnectWithoutUserInput
  connect: PermissionWhereUniqueInput
}

input PermissionCreateWithoutUserInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  type: Role!
}

input PermissionCreateOrConnectWithoutUserInput {
  where: PermissionWhereUniqueInput!
  create: PermissionCreateWithoutUserInput!
}

input RevenueCreateNestedManyWithoutUserInput {
  create: [RevenueCreateWithoutUserInput!]
  connectOrCreate: [RevenueCreateOrConnectWithoutUserInput!]
  createMany: RevenueCreateManyUserInputEnvelope
  connect: [RevenueWhereUniqueInput!]
}

input RevenueCreateWithoutUserInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  Family: FamilyCreateNestedOneWithoutRevenuesInput!
}

input FamilyCreateNestedOneWithoutRevenuesInput {
  create: FamilyCreateWithoutRevenuesInput
  connectOrCreate: FamilyCreateOrConnectWithoutRevenuesInput
  connect: FamilyWhereUniqueInput
}

input FamilyCreateWithoutRevenuesInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  members: UserCreateNestedManyWithoutFamilyInput
  expenses: ExpenseCreateNestedManyWithoutFamilyInput
  accounts: AccountCreateNestedManyWithoutFamilyInput
}

input ExpenseCreateNestedManyWithoutFamilyInput {
  create: [ExpenseCreateWithoutFamilyInput!]
  connectOrCreate: [ExpenseCreateOrConnectWithoutFamilyInput!]
  createMany: ExpenseCreateManyFamilyInputEnvelope
  connect: [ExpenseWhereUniqueInput!]
}

input ExpenseCreateWithoutFamilyInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  name: String!
  expenseDetails: DetailCreateNestedManyWithoutExpenseInput
  monthlyCost: Float
  Account: AccountCreateNestedOneWithoutExpenseInput
}

input DetailCreateNestedManyWithoutExpenseInput {
  create: [DetailCreateWithoutExpenseInput!]
  connectOrCreate: [DetailCreateOrConnectWithoutExpenseInput!]
  createMany: DetailCreateManyExpenseInputEnvelope
  connect: [DetailWhereUniqueInput!]
}

input DetailCreateWithoutExpenseInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  name: String!
  cost: Float
  period: Int
  user: UserCreateNestedOneWithoutMandateInput
}

input UserCreateNestedOneWithoutMandateInput {
  create: UserCreateWithoutMandateInput
  connectOrCreate: UserCreateOrConnectWithoutMandateInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutMandateInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  firstName: String!
  lastName: String!
  email: String!
  password: String
  validationToken: String!
  lastLogin: DateTime
  verificationStatus: VerificationStatus
  Permission: PermissionCreateNestedOneWithoutUserInput
  Family: FamilyCreateNestedOneWithoutMembersInput
  Revenue: RevenueCreateNestedManyWithoutUserInput
}

input FamilyCreateNestedOneWithoutMembersInput {
  create: FamilyCreateWithoutMembersInput
  connectOrCreate: FamilyCreateOrConnectWithoutMembersInput
  connect: FamilyWhereUniqueInput
}

input FamilyCreateWithoutMembersInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  expenses: ExpenseCreateNestedManyWithoutFamilyInput
  revenues: RevenueCreateNestedManyWithoutFamilyInput
  accounts: AccountCreateNestedManyWithoutFamilyInput
}

input RevenueCreateNestedManyWithoutFamilyInput {
  create: [RevenueCreateWithoutFamilyInput!]
  connectOrCreate: [RevenueCreateOrConnectWithoutFamilyInput!]
  createMany: RevenueCreateManyFamilyInputEnvelope
  connect: [RevenueWhereUniqueInput!]
}

input RevenueCreateWithoutFamilyInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  User: UserCreateNestedOneWithoutRevenueInput!
}

input UserCreateNestedOneWithoutRevenueInput {
  create: UserCreateWithoutRevenueInput
  connectOrCreate: UserCreateOrConnectWithoutRevenueInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutRevenueInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  firstName: String!
  lastName: String!
  email: String!
  password: String
  validationToken: String!
  lastLogin: DateTime
  verificationStatus: VerificationStatus
  Permission: PermissionCreateNestedOneWithoutUserInput
  Family: FamilyCreateNestedOneWithoutMembersInput
  Mandate: DetailCreateNestedManyWithoutUserInput
}

input DetailCreateNestedManyWithoutUserInput {
  create: [DetailCreateWithoutUserInput!]
  connectOrCreate: [DetailCreateOrConnectWithoutUserInput!]
  createMany: DetailCreateManyUserInputEnvelope
  connect: [DetailWhereUniqueInput!]
}

input DetailCreateWithoutUserInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  name: String!
  Expense: ExpenseCreateNestedOneWithoutExpenseDetailsInput
  cost: Float
  period: Int
}

input ExpenseCreateNestedOneWithoutExpenseDetailsInput {
  create: ExpenseCreateWithoutExpenseDetailsInput
  connectOrCreate: ExpenseCreateOrConnectWithoutExpenseDetailsInput
  connect: ExpenseWhereUniqueInput
}

input ExpenseCreateWithoutExpenseDetailsInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  name: String!
  monthlyCost: Float
  Family: FamilyCreateNestedOneWithoutExpensesInput
  Account: AccountCreateNestedOneWithoutExpenseInput
}

input FamilyCreateNestedOneWithoutExpensesInput {
  create: FamilyCreateWithoutExpensesInput
  connectOrCreate: FamilyCreateOrConnectWithoutExpensesInput
  connect: FamilyWhereUniqueInput
}

input FamilyCreateWithoutExpensesInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  members: UserCreateNestedManyWithoutFamilyInput
  revenues: RevenueCreateNestedManyWithoutFamilyInput
  accounts: AccountCreateNestedManyWithoutFamilyInput
}

input AccountCreateNestedManyWithoutFamilyInput {
  create: [AccountCreateWithoutFamilyInput!]
  connectOrCreate: [AccountCreateOrConnectWithoutFamilyInput!]
  createMany: AccountCreateManyFamilyInputEnvelope
  connect: [AccountWhereUniqueInput!]
}

input AccountCreateWithoutFamilyInput {
  id: String
  createdAt: DateTime
  type: AccountType!
  updatedAt: DateTime
  name: String!
  charge: ChargeCreateNestedManyWithoutAccountInput
  monthlyBudget: Float
  sold: Float
  Expense: ExpenseCreateNestedManyWithoutAccountInput
}

input ChargeCreateNestedManyWithoutAccountInput {
  create: [ChargeCreateWithoutAccountInput!]
  connectOrCreate: [ChargeCreateOrConnectWithoutAccountInput!]
  createMany: ChargeCreateManyAccountInputEnvelope
  connect: [ChargeWhereUniqueInput!]
}

input ChargeCreateWithoutAccountInput {
  id: String
  createdAt: DateTime
  name: String!
  updatedAt: DateTime
  cost: Float!
}

input ChargeCreateOrConnectWithoutAccountInput {
  where: ChargeWhereUniqueInput!
  create: ChargeCreateWithoutAccountInput!
}

input ChargeCreateManyAccountInputEnvelope {
  data: [ChargeCreateManyAccountInput!]!
  skipDuplicates: Boolean
}

input ChargeCreateManyAccountInput {
  id: String
  createdAt: DateTime
  name: String!
  updatedAt: DateTime
  cost: Float!
}

input ExpenseCreateNestedManyWithoutAccountInput {
  create: [ExpenseCreateWithoutAccountInput!]
  connectOrCreate: [ExpenseCreateOrConnectWithoutAccountInput!]
  createMany: ExpenseCreateManyAccountInputEnvelope
  connect: [ExpenseWhereUniqueInput!]
}

input ExpenseCreateWithoutAccountInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  name: String!
  expenseDetails: DetailCreateNestedManyWithoutExpenseInput
  monthlyCost: Float
  Family: FamilyCreateNestedOneWithoutExpensesInput
}

input ExpenseCreateOrConnectWithoutAccountInput {
  where: ExpenseWhereUniqueInput!
  create: ExpenseCreateWithoutAccountInput!
}

input ExpenseCreateManyAccountInputEnvelope {
  data: [ExpenseCreateManyAccountInput!]!
  skipDuplicates: Boolean
}

input ExpenseCreateManyAccountInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  name: String!
  monthlyCost: Float
  familyId: String
}

input AccountCreateOrConnectWithoutFamilyInput {
  where: AccountWhereUniqueInput!
  create: AccountCreateWithoutFamilyInput!
}

input AccountCreateManyFamilyInputEnvelope {
  data: [AccountCreateManyFamilyInput!]!
  skipDuplicates: Boolean
}

input AccountCreateManyFamilyInput {
  id: String
  createdAt: DateTime
  type: AccountType!
  updatedAt: DateTime
  name: String!
  monthlyBudget: Float
  sold: Float
}

input FamilyCreateOrConnectWithoutExpensesInput {
  where: FamilyWhereUniqueInput!
  create: FamilyCreateWithoutExpensesInput!
}

input AccountCreateNestedOneWithoutExpenseInput {
  create: AccountCreateWithoutExpenseInput
  connectOrCreate: AccountCreateOrConnectWithoutExpenseInput
  connect: AccountWhereUniqueInput
}

input AccountCreateWithoutExpenseInput {
  id: String
  createdAt: DateTime
  type: AccountType!
  updatedAt: DateTime
  name: String!
  charge: ChargeCreateNestedManyWithoutAccountInput
  monthlyBudget: Float
  sold: Float
  Family: FamilyCreateNestedOneWithoutAccountsInput
}

input AccountCreateOrConnectWithoutExpenseInput {
  where: AccountWhereUniqueInput!
  create: AccountCreateWithoutExpenseInput!
}

input ExpenseCreateOrConnectWithoutExpenseDetailsInput {
  where: ExpenseWhereUniqueInput!
  create: ExpenseCreateWithoutExpenseDetailsInput!
}

input DetailCreateOrConnectWithoutUserInput {
  where: DetailWhereUniqueInput!
  create: DetailCreateWithoutUserInput!
}

input DetailCreateManyUserInputEnvelope {
  data: [DetailCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input DetailCreateManyUserInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  name: String!
  expenseId: String
  cost: Float
  period: Int
}

input UserCreateOrConnectWithoutRevenueInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutRevenueInput!
}

input RevenueCreateOrConnectWithoutFamilyInput {
  where: RevenueWhereUniqueInput!
  create: RevenueCreateWithoutFamilyInput!
}

input RevenueCreateManyFamilyInputEnvelope {
  data: [RevenueCreateManyFamilyInput!]!
  skipDuplicates: Boolean
}

input RevenueCreateManyFamilyInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  userId: String!
}

input FamilyCreateOrConnectWithoutMembersInput {
  where: FamilyWhereUniqueInput!
  create: FamilyCreateWithoutMembersInput!
}

input UserCreateOrConnectWithoutMandateInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutMandateInput!
}

input DetailCreateOrConnectWithoutExpenseInput {
  where: DetailWhereUniqueInput!
  create: DetailCreateWithoutExpenseInput!
}

input DetailCreateManyExpenseInputEnvelope {
  data: [DetailCreateManyExpenseInput!]!
  skipDuplicates: Boolean
}

input DetailCreateManyExpenseInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  name: String!
  cost: Float
  period: Int
  userId: String
}

input ExpenseCreateOrConnectWithoutFamilyInput {
  where: ExpenseWhereUniqueInput!
  create: ExpenseCreateWithoutFamilyInput!
}

input ExpenseCreateManyFamilyInputEnvelope {
  data: [ExpenseCreateManyFamilyInput!]!
  skipDuplicates: Boolean
}

input ExpenseCreateManyFamilyInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  name: String!
  monthlyCost: Float
  accountId: String
}

input FamilyCreateOrConnectWithoutRevenuesInput {
  where: FamilyWhereUniqueInput!
  create: FamilyCreateWithoutRevenuesInput!
}

input RevenueCreateOrConnectWithoutUserInput {
  where: RevenueWhereUniqueInput!
  create: RevenueCreateWithoutUserInput!
}

input RevenueCreateManyUserInputEnvelope {
  data: [RevenueCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input RevenueCreateManyUserInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  familyId: String!
}

input UserCreateOrConnectWithoutFamilyInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutFamilyInput!
}

input UserCreateManyFamilyInputEnvelope {
  data: [UserCreateManyFamilyInput!]!
  skipDuplicates: Boolean
}

input UserCreateManyFamilyInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  firstName: String!
  lastName: String!
  email: String!
  password: String
  validationToken: String!
  lastLogin: DateTime
  verificationStatus: VerificationStatus
}

input FamilyCreateOrConnectWithoutAccountsInput {
  where: FamilyWhereUniqueInput!
  create: FamilyCreateWithoutAccountsInput!
}

input AccountCreateOrConnectWithoutChargeInput {
  where: AccountWhereUniqueInput!
  create: AccountCreateWithoutChargeInput!
}

input ChargeUpdateInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  cost: FloatFieldUpdateOperationsInput
  Account: AccountUpdateOneWithoutChargeNestedInput
}

input StringFieldUpdateOperationsInput {
  set: String
}

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input FloatFieldUpdateOperationsInput {
  set: Float
  increment: Float
  decrement: Float
  multiply: Float
  divide: Float
}

input AccountUpdateOneWithoutChargeNestedInput {
  create: AccountCreateWithoutChargeInput
  connectOrCreate: AccountCreateOrConnectWithoutChargeInput
  upsert: AccountUpsertWithoutChargeInput
  disconnect: Boolean
  delete: Boolean
  connect: AccountWhereUniqueInput
  update: AccountUpdateWithoutChargeInput
}

input AccountUpsertWithoutChargeInput {
  update: AccountUpdateWithoutChargeInput!
  create: AccountCreateWithoutChargeInput!
}

input AccountUpdateWithoutChargeInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  type: EnumAccountTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  monthlyBudget: FloatFieldUpdateOperationsInput
  sold: FloatFieldUpdateOperationsInput
  Family: FamilyUpdateOneWithoutAccountsNestedInput
  Expense: ExpenseUpdateManyWithoutAccountNestedInput
}

input EnumAccountTypeFieldUpdateOperationsInput {
  set: AccountType
}

input FamilyUpdateOneWithoutAccountsNestedInput {
  create: FamilyCreateWithoutAccountsInput
  connectOrCreate: FamilyCreateOrConnectWithoutAccountsInput
  upsert: FamilyUpsertWithoutAccountsInput
  disconnect: Boolean
  delete: Boolean
  connect: FamilyWhereUniqueInput
  update: FamilyUpdateWithoutAccountsInput
}

input FamilyUpsertWithoutAccountsInput {
  update: FamilyUpdateWithoutAccountsInput!
  create: FamilyCreateWithoutAccountsInput!
}

input FamilyUpdateWithoutAccountsInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  members: UserUpdateManyWithoutFamilyNestedInput
  expenses: ExpenseUpdateManyWithoutFamilyNestedInput
  revenues: RevenueUpdateManyWithoutFamilyNestedInput
}

input UserUpdateManyWithoutFamilyNestedInput {
  create: [UserCreateWithoutFamilyInput!]
  connectOrCreate: [UserCreateOrConnectWithoutFamilyInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFamilyInput!]
  createMany: UserCreateManyFamilyInputEnvelope
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFamilyInput!]
  updateMany: [UserUpdateManyWithWhereWithoutFamilyInput!]
  deleteMany: [UserScalarWhereInput!]
}

input UserUpsertWithWhereUniqueWithoutFamilyInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutFamilyInput!
  create: UserCreateWithoutFamilyInput!
}

input UserUpdateWithoutFamilyInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  validationToken: StringFieldUpdateOperationsInput
  lastLogin: NullableDateTimeFieldUpdateOperationsInput
  verificationStatus: EnumVerificationStatusFieldUpdateOperationsInput
  Permission: PermissionUpdateOneWithoutUserNestedInput
  Revenue: RevenueUpdateManyWithoutUserNestedInput
  Mandate: DetailUpdateManyWithoutUserNestedInput
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input EnumVerificationStatusFieldUpdateOperationsInput {
  set: VerificationStatus
}

input PermissionUpdateOneWithoutUserNestedInput {
  create: PermissionCreateWithoutUserInput
  connectOrCreate: PermissionCreateOrConnectWithoutUserInput
  upsert: PermissionUpsertWithoutUserInput
  disconnect: Boolean
  delete: Boolean
  connect: PermissionWhereUniqueInput
  update: PermissionUpdateWithoutUserInput
}

input PermissionUpsertWithoutUserInput {
  update: PermissionUpdateWithoutUserInput!
  create: PermissionCreateWithoutUserInput!
}

input PermissionUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  type: EnumRoleFieldUpdateOperationsInput
}

input EnumRoleFieldUpdateOperationsInput {
  set: Role
}

input RevenueUpdateManyWithoutUserNestedInput {
  create: [RevenueCreateWithoutUserInput!]
  connectOrCreate: [RevenueCreateOrConnectWithoutUserInput!]
  upsert: [RevenueUpsertWithWhereUniqueWithoutUserInput!]
  createMany: RevenueCreateManyUserInputEnvelope
  set: [RevenueWhereUniqueInput!]
  disconnect: [RevenueWhereUniqueInput!]
  delete: [RevenueWhereUniqueInput!]
  connect: [RevenueWhereUniqueInput!]
  update: [RevenueUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [RevenueUpdateManyWithWhereWithoutUserInput!]
  deleteMany: [RevenueScalarWhereInput!]
}

input RevenueUpsertWithWhereUniqueWithoutUserInput {
  where: RevenueWhereUniqueInput!
  update: RevenueUpdateWithoutUserInput!
  create: RevenueCreateWithoutUserInput!
}

input RevenueUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Family: FamilyUpdateOneRequiredWithoutRevenuesNestedInput
}

input FamilyUpdateOneRequiredWithoutRevenuesNestedInput {
  create: FamilyCreateWithoutRevenuesInput
  connectOrCreate: FamilyCreateOrConnectWithoutRevenuesInput
  upsert: FamilyUpsertWithoutRevenuesInput
  connect: FamilyWhereUniqueInput
  update: FamilyUpdateWithoutRevenuesInput
}

input FamilyUpsertWithoutRevenuesInput {
  update: FamilyUpdateWithoutRevenuesInput!
  create: FamilyCreateWithoutRevenuesInput!
}

input FamilyUpdateWithoutRevenuesInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  members: UserUpdateManyWithoutFamilyNestedInput
  expenses: ExpenseUpdateManyWithoutFamilyNestedInput
  accounts: AccountUpdateManyWithoutFamilyNestedInput
}

input ExpenseUpdateManyWithoutFamilyNestedInput {
  create: [ExpenseCreateWithoutFamilyInput!]
  connectOrCreate: [ExpenseCreateOrConnectWithoutFamilyInput!]
  upsert: [ExpenseUpsertWithWhereUniqueWithoutFamilyInput!]
  createMany: ExpenseCreateManyFamilyInputEnvelope
  set: [ExpenseWhereUniqueInput!]
  disconnect: [ExpenseWhereUniqueInput!]
  delete: [ExpenseWhereUniqueInput!]
  connect: [ExpenseWhereUniqueInput!]
  update: [ExpenseUpdateWithWhereUniqueWithoutFamilyInput!]
  updateMany: [ExpenseUpdateManyWithWhereWithoutFamilyInput!]
  deleteMany: [ExpenseScalarWhereInput!]
}

input ExpenseUpsertWithWhereUniqueWithoutFamilyInput {
  where: ExpenseWhereUniqueInput!
  update: ExpenseUpdateWithoutFamilyInput!
  create: ExpenseCreateWithoutFamilyInput!
}

input ExpenseUpdateWithoutFamilyInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  expenseDetails: DetailUpdateManyWithoutExpenseNestedInput
  monthlyCost: FloatFieldUpdateOperationsInput
  Account: AccountUpdateOneWithoutExpenseNestedInput
}

input DetailUpdateManyWithoutExpenseNestedInput {
  create: [DetailCreateWithoutExpenseInput!]
  connectOrCreate: [DetailCreateOrConnectWithoutExpenseInput!]
  upsert: [DetailUpsertWithWhereUniqueWithoutExpenseInput!]
  createMany: DetailCreateManyExpenseInputEnvelope
  set: [DetailWhereUniqueInput!]
  disconnect: [DetailWhereUniqueInput!]
  delete: [DetailWhereUniqueInput!]
  connect: [DetailWhereUniqueInput!]
  update: [DetailUpdateWithWhereUniqueWithoutExpenseInput!]
  updateMany: [DetailUpdateManyWithWhereWithoutExpenseInput!]
  deleteMany: [DetailScalarWhereInput!]
}

input DetailUpsertWithWhereUniqueWithoutExpenseInput {
  where: DetailWhereUniqueInput!
  update: DetailUpdateWithoutExpenseInput!
  create: DetailCreateWithoutExpenseInput!
}

input DetailUpdateWithoutExpenseInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  cost: FloatFieldUpdateOperationsInput
  period: NullableIntFieldUpdateOperationsInput
  user: UserUpdateOneWithoutMandateNestedInput
}

input NullableIntFieldUpdateOperationsInput {
  set: Int
  increment: Int
  decrement: Int
  multiply: Int
  divide: Int
}

input UserUpdateOneWithoutMandateNestedInput {
  create: UserCreateWithoutMandateInput
  connectOrCreate: UserCreateOrConnectWithoutMandateInput
  upsert: UserUpsertWithoutMandateInput
  disconnect: Boolean
  delete: Boolean
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutMandateInput
}

input UserUpsertWithoutMandateInput {
  update: UserUpdateWithoutMandateInput!
  create: UserCreateWithoutMandateInput!
}

input UserUpdateWithoutMandateInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  validationToken: StringFieldUpdateOperationsInput
  lastLogin: NullableDateTimeFieldUpdateOperationsInput
  verificationStatus: EnumVerificationStatusFieldUpdateOperationsInput
  Permission: PermissionUpdateOneWithoutUserNestedInput
  Family: FamilyUpdateOneWithoutMembersNestedInput
  Revenue: RevenueUpdateManyWithoutUserNestedInput
}

input FamilyUpdateOneWithoutMembersNestedInput {
  create: FamilyCreateWithoutMembersInput
  connectOrCreate: FamilyCreateOrConnectWithoutMembersInput
  upsert: FamilyUpsertWithoutMembersInput
  disconnect: Boolean
  delete: Boolean
  connect: FamilyWhereUniqueInput
  update: FamilyUpdateWithoutMembersInput
}

input FamilyUpsertWithoutMembersInput {
  update: FamilyUpdateWithoutMembersInput!
  create: FamilyCreateWithoutMembersInput!
}

input FamilyUpdateWithoutMembersInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  expenses: ExpenseUpdateManyWithoutFamilyNestedInput
  revenues: RevenueUpdateManyWithoutFamilyNestedInput
  accounts: AccountUpdateManyWithoutFamilyNestedInput
}

input RevenueUpdateManyWithoutFamilyNestedInput {
  create: [RevenueCreateWithoutFamilyInput!]
  connectOrCreate: [RevenueCreateOrConnectWithoutFamilyInput!]
  upsert: [RevenueUpsertWithWhereUniqueWithoutFamilyInput!]
  createMany: RevenueCreateManyFamilyInputEnvelope
  set: [RevenueWhereUniqueInput!]
  disconnect: [RevenueWhereUniqueInput!]
  delete: [RevenueWhereUniqueInput!]
  connect: [RevenueWhereUniqueInput!]
  update: [RevenueUpdateWithWhereUniqueWithoutFamilyInput!]
  updateMany: [RevenueUpdateManyWithWhereWithoutFamilyInput!]
  deleteMany: [RevenueScalarWhereInput!]
}

input RevenueUpsertWithWhereUniqueWithoutFamilyInput {
  where: RevenueWhereUniqueInput!
  update: RevenueUpdateWithoutFamilyInput!
  create: RevenueCreateWithoutFamilyInput!
}

input RevenueUpdateWithoutFamilyInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  User: UserUpdateOneRequiredWithoutRevenueNestedInput
}

input UserUpdateOneRequiredWithoutRevenueNestedInput {
  create: UserCreateWithoutRevenueInput
  connectOrCreate: UserCreateOrConnectWithoutRevenueInput
  upsert: UserUpsertWithoutRevenueInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutRevenueInput
}

input UserUpsertWithoutRevenueInput {
  update: UserUpdateWithoutRevenueInput!
  create: UserCreateWithoutRevenueInput!
}

input UserUpdateWithoutRevenueInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  validationToken: StringFieldUpdateOperationsInput
  lastLogin: NullableDateTimeFieldUpdateOperationsInput
  verificationStatus: EnumVerificationStatusFieldUpdateOperationsInput
  Permission: PermissionUpdateOneWithoutUserNestedInput
  Family: FamilyUpdateOneWithoutMembersNestedInput
  Mandate: DetailUpdateManyWithoutUserNestedInput
}

input DetailUpdateManyWithoutUserNestedInput {
  create: [DetailCreateWithoutUserInput!]
  connectOrCreate: [DetailCreateOrConnectWithoutUserInput!]
  upsert: [DetailUpsertWithWhereUniqueWithoutUserInput!]
  createMany: DetailCreateManyUserInputEnvelope
  set: [DetailWhereUniqueInput!]
  disconnect: [DetailWhereUniqueInput!]
  delete: [DetailWhereUniqueInput!]
  connect: [DetailWhereUniqueInput!]
  update: [DetailUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [DetailUpdateManyWithWhereWithoutUserInput!]
  deleteMany: [DetailScalarWhereInput!]
}

input DetailUpsertWithWhereUniqueWithoutUserInput {
  where: DetailWhereUniqueInput!
  update: DetailUpdateWithoutUserInput!
  create: DetailCreateWithoutUserInput!
}

input DetailUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  Expense: ExpenseUpdateOneWithoutExpenseDetailsNestedInput
  cost: FloatFieldUpdateOperationsInput
  period: NullableIntFieldUpdateOperationsInput
}

input ExpenseUpdateOneWithoutExpenseDetailsNestedInput {
  create: ExpenseCreateWithoutExpenseDetailsInput
  connectOrCreate: ExpenseCreateOrConnectWithoutExpenseDetailsInput
  upsert: ExpenseUpsertWithoutExpenseDetailsInput
  disconnect: Boolean
  delete: Boolean
  connect: ExpenseWhereUniqueInput
  update: ExpenseUpdateWithoutExpenseDetailsInput
}

input ExpenseUpsertWithoutExpenseDetailsInput {
  update: ExpenseUpdateWithoutExpenseDetailsInput!
  create: ExpenseCreateWithoutExpenseDetailsInput!
}

input ExpenseUpdateWithoutExpenseDetailsInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  monthlyCost: FloatFieldUpdateOperationsInput
  Family: FamilyUpdateOneWithoutExpensesNestedInput
  Account: AccountUpdateOneWithoutExpenseNestedInput
}

input FamilyUpdateOneWithoutExpensesNestedInput {
  create: FamilyCreateWithoutExpensesInput
  connectOrCreate: FamilyCreateOrConnectWithoutExpensesInput
  upsert: FamilyUpsertWithoutExpensesInput
  disconnect: Boolean
  delete: Boolean
  connect: FamilyWhereUniqueInput
  update: FamilyUpdateWithoutExpensesInput
}

input FamilyUpsertWithoutExpensesInput {
  update: FamilyUpdateWithoutExpensesInput!
  create: FamilyCreateWithoutExpensesInput!
}

input FamilyUpdateWithoutExpensesInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  members: UserUpdateManyWithoutFamilyNestedInput
  revenues: RevenueUpdateManyWithoutFamilyNestedInput
  accounts: AccountUpdateManyWithoutFamilyNestedInput
}

input AccountUpdateManyWithoutFamilyNestedInput {
  create: [AccountCreateWithoutFamilyInput!]
  connectOrCreate: [AccountCreateOrConnectWithoutFamilyInput!]
  upsert: [AccountUpsertWithWhereUniqueWithoutFamilyInput!]
  createMany: AccountCreateManyFamilyInputEnvelope
  set: [AccountWhereUniqueInput!]
  disconnect: [AccountWhereUniqueInput!]
  delete: [AccountWhereUniqueInput!]
  connect: [AccountWhereUniqueInput!]
  update: [AccountUpdateWithWhereUniqueWithoutFamilyInput!]
  updateMany: [AccountUpdateManyWithWhereWithoutFamilyInput!]
  deleteMany: [AccountScalarWhereInput!]
}

input AccountUpsertWithWhereUniqueWithoutFamilyInput {
  where: AccountWhereUniqueInput!
  update: AccountUpdateWithoutFamilyInput!
  create: AccountCreateWithoutFamilyInput!
}

input AccountUpdateWithoutFamilyInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  type: EnumAccountTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  charge: ChargeUpdateManyWithoutAccountNestedInput
  monthlyBudget: FloatFieldUpdateOperationsInput
  sold: FloatFieldUpdateOperationsInput
  Expense: ExpenseUpdateManyWithoutAccountNestedInput
}

input ChargeUpdateManyWithoutAccountNestedInput {
  create: [ChargeCreateWithoutAccountInput!]
  connectOrCreate: [ChargeCreateOrConnectWithoutAccountInput!]
  upsert: [ChargeUpsertWithWhereUniqueWithoutAccountInput!]
  createMany: ChargeCreateManyAccountInputEnvelope
  set: [ChargeWhereUniqueInput!]
  disconnect: [ChargeWhereUniqueInput!]
  delete: [ChargeWhereUniqueInput!]
  connect: [ChargeWhereUniqueInput!]
  update: [ChargeUpdateWithWhereUniqueWithoutAccountInput!]
  updateMany: [ChargeUpdateManyWithWhereWithoutAccountInput!]
  deleteMany: [ChargeScalarWhereInput!]
}

input ChargeUpsertWithWhereUniqueWithoutAccountInput {
  where: ChargeWhereUniqueInput!
  update: ChargeUpdateWithoutAccountInput!
  create: ChargeCreateWithoutAccountInput!
}

input ChargeUpdateWithoutAccountInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  cost: FloatFieldUpdateOperationsInput
}

input ChargeUpdateWithWhereUniqueWithoutAccountInput {
  where: ChargeWhereUniqueInput!
  data: ChargeUpdateWithoutAccountInput!
}

input ChargeUpdateManyWithWhereWithoutAccountInput {
  where: ChargeScalarWhereInput!
  data: ChargeUpdateManyMutationInput!
}

input ChargeScalarWhereInput {
  AND: [ChargeScalarWhereInput!]
  OR: [ChargeScalarWhereInput!]
  NOT: [ChargeScalarWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  name: StringFilter
  updatedAt: DateTimeFilter
  cost: FloatFilter
  accountId: StringNullableFilter
}

input ChargeUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  cost: FloatFieldUpdateOperationsInput
}

input ExpenseUpdateManyWithoutAccountNestedInput {
  create: [ExpenseCreateWithoutAccountInput!]
  connectOrCreate: [ExpenseCreateOrConnectWithoutAccountInput!]
  upsert: [ExpenseUpsertWithWhereUniqueWithoutAccountInput!]
  createMany: ExpenseCreateManyAccountInputEnvelope
  set: [ExpenseWhereUniqueInput!]
  disconnect: [ExpenseWhereUniqueInput!]
  delete: [ExpenseWhereUniqueInput!]
  connect: [ExpenseWhereUniqueInput!]
  update: [ExpenseUpdateWithWhereUniqueWithoutAccountInput!]
  updateMany: [ExpenseUpdateManyWithWhereWithoutAccountInput!]
  deleteMany: [ExpenseScalarWhereInput!]
}

input ExpenseUpsertWithWhereUniqueWithoutAccountInput {
  where: ExpenseWhereUniqueInput!
  update: ExpenseUpdateWithoutAccountInput!
  create: ExpenseCreateWithoutAccountInput!
}

input ExpenseUpdateWithoutAccountInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  expenseDetails: DetailUpdateManyWithoutExpenseNestedInput
  monthlyCost: FloatFieldUpdateOperationsInput
  Family: FamilyUpdateOneWithoutExpensesNestedInput
}

input ExpenseUpdateWithWhereUniqueWithoutAccountInput {
  where: ExpenseWhereUniqueInput!
  data: ExpenseUpdateWithoutAccountInput!
}

input ExpenseUpdateManyWithWhereWithoutAccountInput {
  where: ExpenseScalarWhereInput!
  data: ExpenseUpdateManyMutationInput!
}

input ExpenseScalarWhereInput {
  AND: [ExpenseScalarWhereInput!]
  OR: [ExpenseScalarWhereInput!]
  NOT: [ExpenseScalarWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  monthlyCost: FloatFilter
  familyId: StringNullableFilter
  accountId: StringNullableFilter
}

input ExpenseUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  monthlyCost: FloatFieldUpdateOperationsInput
}

input AccountUpdateWithWhereUniqueWithoutFamilyInput {
  where: AccountWhereUniqueInput!
  data: AccountUpdateWithoutFamilyInput!
}

input AccountUpdateManyWithWhereWithoutFamilyInput {
  where: AccountScalarWhereInput!
  data: AccountUpdateManyMutationInput!
}

input AccountScalarWhereInput {
  AND: [AccountScalarWhereInput!]
  OR: [AccountScalarWhereInput!]
  NOT: [AccountScalarWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  type: EnumAccountTypeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  monthlyBudget: FloatFilter
  sold: FloatFilter
  familyId: StringNullableFilter
}

input AccountUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  type: EnumAccountTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  monthlyBudget: FloatFieldUpdateOperationsInput
  sold: FloatFieldUpdateOperationsInput
}

input AccountUpdateOneWithoutExpenseNestedInput {
  create: AccountCreateWithoutExpenseInput
  connectOrCreate: AccountCreateOrConnectWithoutExpenseInput
  upsert: AccountUpsertWithoutExpenseInput
  disconnect: Boolean
  delete: Boolean
  connect: AccountWhereUniqueInput
  update: AccountUpdateWithoutExpenseInput
}

input AccountUpsertWithoutExpenseInput {
  update: AccountUpdateWithoutExpenseInput!
  create: AccountCreateWithoutExpenseInput!
}

input AccountUpdateWithoutExpenseInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  type: EnumAccountTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  charge: ChargeUpdateManyWithoutAccountNestedInput
  monthlyBudget: FloatFieldUpdateOperationsInput
  sold: FloatFieldUpdateOperationsInput
  Family: FamilyUpdateOneWithoutAccountsNestedInput
}

input DetailUpdateWithWhereUniqueWithoutUserInput {
  where: DetailWhereUniqueInput!
  data: DetailUpdateWithoutUserInput!
}

input DetailUpdateManyWithWhereWithoutUserInput {
  where: DetailScalarWhereInput!
  data: DetailUpdateManyMutationInput!
}

input DetailScalarWhereInput {
  AND: [DetailScalarWhereInput!]
  OR: [DetailScalarWhereInput!]
  NOT: [DetailScalarWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  expenseId: StringNullableFilter
  cost: FloatFilter
  period: IntNullableFilter
  userId: StringNullableFilter
}

input DetailUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  cost: FloatFieldUpdateOperationsInput
  period: NullableIntFieldUpdateOperationsInput
}

input RevenueUpdateWithWhereUniqueWithoutFamilyInput {
  where: RevenueWhereUniqueInput!
  data: RevenueUpdateWithoutFamilyInput!
}

input RevenueUpdateManyWithWhereWithoutFamilyInput {
  where: RevenueScalarWhereInput!
  data: RevenueUpdateManyMutationInput!
}

input RevenueScalarWhereInput {
  AND: [RevenueScalarWhereInput!]
  OR: [RevenueScalarWhereInput!]
  NOT: [RevenueScalarWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
  familyId: StringFilter
}

input RevenueUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DetailUpdateWithWhereUniqueWithoutExpenseInput {
  where: DetailWhereUniqueInput!
  data: DetailUpdateWithoutExpenseInput!
}

input DetailUpdateManyWithWhereWithoutExpenseInput {
  where: DetailScalarWhereInput!
  data: DetailUpdateManyMutationInput!
}

input ExpenseUpdateWithWhereUniqueWithoutFamilyInput {
  where: ExpenseWhereUniqueInput!
  data: ExpenseUpdateWithoutFamilyInput!
}

input ExpenseUpdateManyWithWhereWithoutFamilyInput {
  where: ExpenseScalarWhereInput!
  data: ExpenseUpdateManyMutationInput!
}

input RevenueUpdateWithWhereUniqueWithoutUserInput {
  where: RevenueWhereUniqueInput!
  data: RevenueUpdateWithoutUserInput!
}

input RevenueUpdateManyWithWhereWithoutUserInput {
  where: RevenueScalarWhereInput!
  data: RevenueUpdateManyMutationInput!
}

input UserUpdateWithWhereUniqueWithoutFamilyInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutFamilyInput!
}

input UserUpdateManyWithWhereWithoutFamilyInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyMutationInput!
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  firstName: StringFilter
  lastName: StringFilter
  email: StringFilter
  password: StringNullableFilter
  validationToken: StringFilter
  lastLogin: DateTimeNullableFilter
  verificationStatus: EnumVerificationStatusFilter
  familyId: StringNullableFilter
}

input UserUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  validationToken: StringFieldUpdateOperationsInput
  lastLogin: NullableDateTimeFieldUpdateOperationsInput
  verificationStatus: EnumVerificationStatusFieldUpdateOperationsInput
}

input DetailCreateInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  name: String!
  Expense: ExpenseCreateNestedOneWithoutExpenseDetailsInput
  cost: Float
  period: Int
  user: UserCreateNestedOneWithoutMandateInput
}

input DetailUpdateInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  Expense: ExpenseUpdateOneWithoutExpenseDetailsNestedInput
  cost: FloatFieldUpdateOperationsInput
  period: NullableIntFieldUpdateOperationsInput
  user: UserUpdateOneWithoutMandateNestedInput
}

input AccountCreateInput {
  id: String
  createdAt: DateTime
  type: AccountType!
  updatedAt: DateTime
  name: String!
  charge: ChargeCreateNestedManyWithoutAccountInput
  monthlyBudget: Float
  sold: Float
  Family: FamilyCreateNestedOneWithoutAccountsInput
  Expense: ExpenseCreateNestedManyWithoutAccountInput
}

input AccountUpdateInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  type: EnumAccountTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  charge: ChargeUpdateManyWithoutAccountNestedInput
  monthlyBudget: FloatFieldUpdateOperationsInput
  sold: FloatFieldUpdateOperationsInput
  Family: FamilyUpdateOneWithoutAccountsNestedInput
  Expense: ExpenseUpdateManyWithoutAccountNestedInput
}

input ExpenseCreateInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  name: String!
  expenseDetails: DetailCreateNestedManyWithoutExpenseInput
  monthlyCost: Float
  Family: FamilyCreateNestedOneWithoutExpensesInput
  Account: AccountCreateNestedOneWithoutExpenseInput
}

input ExpenseUpdateInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  expenseDetails: DetailUpdateManyWithoutExpenseNestedInput
  monthlyCost: FloatFieldUpdateOperationsInput
  Family: FamilyUpdateOneWithoutExpensesNestedInput
  Account: AccountUpdateOneWithoutExpenseNestedInput
}

input RevenueCreateInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  User: UserCreateNestedOneWithoutRevenueInput!
  Family: FamilyCreateNestedOneWithoutRevenuesInput!
}

input RevenueUpdateInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  User: UserUpdateOneRequiredWithoutRevenueNestedInput
  Family: FamilyUpdateOneRequiredWithoutRevenuesNestedInput
}

input FamilyCreateInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  members: UserCreateNestedManyWithoutFamilyInput
  expenses: ExpenseCreateNestedManyWithoutFamilyInput
  revenues: RevenueCreateNestedManyWithoutFamilyInput
  accounts: AccountCreateNestedManyWithoutFamilyInput
}

input FamilyUpdateInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  members: UserUpdateManyWithoutFamilyNestedInput
  expenses: ExpenseUpdateManyWithoutFamilyNestedInput
  revenues: RevenueUpdateManyWithoutFamilyNestedInput
  accounts: AccountUpdateManyWithoutFamilyNestedInput
}

input PermissionCreateInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  User: UserCreateNestedOneWithoutPermissionInput
  type: Role!
}

input UserCreateNestedOneWithoutPermissionInput {
  create: UserCreateWithoutPermissionInput
  connectOrCreate: UserCreateOrConnectWithoutPermissionInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutPermissionInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  firstName: String!
  lastName: String!
  email: String!
  password: String
  validationToken: String!
  lastLogin: DateTime
  verificationStatus: VerificationStatus
  Family: FamilyCreateNestedOneWithoutMembersInput
  Revenue: RevenueCreateNestedManyWithoutUserInput
  Mandate: DetailCreateNestedManyWithoutUserInput
}

input UserCreateOrConnectWithoutPermissionInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutPermissionInput!
}

input PermissionUpdateInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  User: UserUpdateOneWithoutPermissionNestedInput
  type: EnumRoleFieldUpdateOperationsInput
}

input UserUpdateOneWithoutPermissionNestedInput {
  create: UserCreateWithoutPermissionInput
  connectOrCreate: UserCreateOrConnectWithoutPermissionInput
  upsert: UserUpsertWithoutPermissionInput
  disconnect: Boolean
  delete: Boolean
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutPermissionInput
}

input UserUpsertWithoutPermissionInput {
  update: UserUpdateWithoutPermissionInput!
  create: UserCreateWithoutPermissionInput!
}

input UserUpdateWithoutPermissionInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  validationToken: StringFieldUpdateOperationsInput
  lastLogin: NullableDateTimeFieldUpdateOperationsInput
  verificationStatus: EnumVerificationStatusFieldUpdateOperationsInput
  Family: FamilyUpdateOneWithoutMembersNestedInput
  Revenue: RevenueUpdateManyWithoutUserNestedInput
  Mandate: DetailUpdateManyWithoutUserNestedInput
}

input UserCreateInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  firstName: String!
  lastName: String!
  email: String!
  password: String
  validationToken: String!
  lastLogin: DateTime
  verificationStatus: VerificationStatus
  Permission: PermissionCreateNestedOneWithoutUserInput
  Family: FamilyCreateNestedOneWithoutMembersInput
  Revenue: RevenueCreateNestedManyWithoutUserInput
  Mandate: DetailCreateNestedManyWithoutUserInput
}

input UserUpdateInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  validationToken: StringFieldUpdateOperationsInput
  lastLogin: NullableDateTimeFieldUpdateOperationsInput
  verificationStatus: EnumVerificationStatusFieldUpdateOperationsInput
  Permission: PermissionUpdateOneWithoutUserNestedInput
  Family: FamilyUpdateOneWithoutMembersNestedInput
  Revenue: RevenueUpdateManyWithoutUserNestedInput
  Mandate: DetailUpdateManyWithoutUserNestedInput
}

input AuthInput {
  email: String
  password: String
}