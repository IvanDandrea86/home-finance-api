// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider   = "prisma-client-js"
  engineType = "library"


}

generator jsonSchema {
  provider = "prisma-json-schema-generator"
  output   = "./generated/"
}

generator nestgraphql {
  provider = "node node_modules/prisma-nestjs-graphql"
  // for yarn monorepos
  // provider = "prisma-nestjs-graphql"
  output   = "../src/@generated"
}

// generator nestgraphql {
//   provider = "node node_modules/prisma-nestjs-graphql"
//   // for yarn monorepos
//   // provider = "prisma-nestjs-graphql"
//   output   = "../node_modules/@prisma/client/nestjs-graphql"
// }

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                 String             @id @default(uuid())
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  firstName          String
  lastName           String
  email              String             @unique
  password           String?
  validationToken    String
  lastLogin          DateTime?
  verificationStatus VerificationStatus @default(NOT_VERIFIED)
  Permission         Permission?
  Family             Family?            @relation(fields: [familyId], references: [id])
  familyId           String?
  Revenue            Revenue[]
}

enum VerificationStatus {
  NOT_VERIFIED
  VERIFIED
  PENDING
}

model Permission {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String   @unique
  type      Role
}

enum Role {
  ADMIN
  USER
}

model Family {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  members   User[]
  expenses  Expense[]
  revenues  Revenue[]
}

model Revenue {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
  Family    Family   @relation(fields: [familyId], references: [id])
  userId    String
  familyId  String
}

model Expense {
  id             String           @id @default(uuid())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  name           String           @unique
  expenseDetails ExpenseDetails[]
  monthlyCost    Int              @default(0)
  Family         Family?          @relation(fields: [familyId], references: [id])
  familyId       String?
}

model ExpenseDetails {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Expense     Expense? @relation(fields: [expenseId], references: [id])
  expenseId   String?
  monthlyCost Int      @default(0)
}

model Account {
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now())
  type          AccountType
  updatedAt     DateTime    @updatedAt
  name          String      @unique
  monthlyBudget Int         @default(0)
  sold          Int         @default(0)
}

enum AccountType {
  SAVING
  EXPENSE
}
